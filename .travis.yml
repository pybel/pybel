sudo: true
cache: pip
dist: xenial

services:
  - mysql
  - postgresql

language: python

jobs:
  include:
    # lint stage
    - stage: lint
      python: 3.8
      env: TOXENV=manifest
    - env: TOXENV=flake8
    - env: TOXENV=pyroma
    - env: TOXENV=mypy
    # docs stage
    - stage: docs
      python: 3.8
      env: TOXENV=doc8
    - env: TOXENV=readme
    - env: TOXENV=docs
    - stage: test
      name: "MySQL"
      python: 3.8
      env: TOXENV=py DB=mysql PYBEL_TEST_CONNECTOR=mysqlclient PYBEL_TEST_CONNECTION=mysql+mysqldb://travis@localhost/test?charset=utf8
    - name: "PostgreSQL"
      env: TOXENV=py DB=postgresql PYBEL_TEST_CONNECTOR=psycopg2-binary PYBEL_TEST_CONNECTION=postgresql+psycopg2://travis@localhost/tests
    - name: "SQLite"
      env: TOXENV=py DB=sqlite
    - name: "Old Python with SQLite"
      python: 3.5
      env: TOXENV=py DB=sqlite


matrix:
  allow_failures:
    - env: TOXENV=mypy

install:
  - sh -c 'if [ "$TOXENV" = "py" ]; then pip install tox codecov; else pip install tox; fi'

before_script:
  - sh -c "if [ '$DB' = 'postgresql' ]; then psql -c 'DROP DATABASE IF EXISTS tests;' -U postgres; fi"
  - sh -c "if [ '$DB' = 'postgresql' ]; then psql -c 'DROP DATABASE IF EXISTS tests_tmp;' -U postgres; fi"
  - sh -c "if [ '$DB' = 'postgresql' ]; then psql -c 'CREATE DATABASE tests;' -U postgres; fi"
  - sh -c "if [ '$DB' = 'postgresql' ]; then psql -c 'CREATE DATABASE tests_tmp;' -U postgres; fi"
  - sh -c "if [ '$DB' = 'mysql' ]; then mysql -e 'DROP DATABASE IF EXISTS test;'; fi"
  - sh -c "if [ '$DB' = 'mysql' ]; then mysql -e 'CREATE DATABASE test CHARACTER SET utf8 COLLATE utf8_general_ci;'; fi"
  - sh -c "if [ '$DB' = 'mysql' ]; then mysql -e \"GRANT ALL PRIVILEGES ON test.* to 'travis'@'%' WITH GRANT OPTION;\"; fi"

script:
  - tox

after_success:
  - sh -c 'if [ "$TOXENV" = "py" ]; then tox -e coverage-report; codecov; fi'

notifications:
  slack: pybel:n2KbWKBum3musnBg3L76gGwq
